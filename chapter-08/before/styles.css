@import url('https://fonts.googleapis.com/css2?family=Raleway:wght@400;700&display=swap');
body {
    font-family: 'Raleway', sans-serif;
    color: #171717;
    font-variant-numeric: lining-nums; /* set how we want our numbers to display in this case property will change our numbers from old-style to modern */
    background: #fbffff;
    padding: 1rem;
}
section {
    margin: 1rem 0;
}
section h2 {
    padding: 1rem;
    margin: 0;
}
h1, h2 {
    color: #2c6c69;
}
button, .button, input {   /* At the first we consider the similarities between links and buttons */
    background: none;
    border-radius: 4px;
    padding: 10px;
    border: solid 1px #ddd;
    text-decoration: none;
    display: inline-block;
}
button:hover, .button:hover {
    outline: dotted 1px #2c6c69;  /* works similarly to border */
    outline-offset: 2px;  /* takes a length value that dicatates the amount of space we want between the outline and the edge of the element */
}
button:focus, .button:focus {
    outline: solid 1px #2c6c69;
    outline-offset: 2px;
}
button.primary, .button.primary {
    border-color: #2c6c69;
    background-color: #2c6c69;
    color: #ffffff;
}

button.secondary, .button.secondary {
    border-color: #2c6c69;
    color: #2c6c69;
}
button.destructive {
    border-color: #9d1616;
    color: #9d1616;
    border-radius: 50%;
    padding: 5px;
}
button.desructive img {
    vertical-align: middle;  /* centers the image inside the button, applied to both inline- and inline-block property */
}
button.desctructive:hover, button.destructive:focus {
    outline-color: #9d1616;
}
th, dt {
    color: #3a3a3a;
    font-weight: normal;
    font-size: .875em;
}
tbody td:nth-of-type(2), tfoot td {
    font-weight: bold;
}
tbody tr:nth-of-type(even) {
    background-color: #f2fcfc;
}
table {
    border-collapse: collapse;  /* lets us collapse the borders between the cells of our table */
    width: 100%;
}
tr {
    border-top: solid 1px #aeb7b7;
}
dt::after {
    content: ":";  /* adds a colon after each definition term */
}
section {
    background: #ffffff;
    border-radius: 4px;
    box-shadow: 2px 2px 7px #aeb7b7; /* box-shadow: offset-x offset-y blur-radius spread-radius color */
}
@media (max-width: 549px) {
    td, tr { display: block;}
    table td > img {   /* Specifically targets images that are immediate children of the cell to avoid floating the image in the button (the red X) */
        float: left;
        margin-right: 10px;
    }
    thead {
        position: absolute;
        left: -9999rem;
    }
    td {
        text-align: right;
        padding: 5px;
    }
    td[data-name]::before {
        content: attr(data-name) ": ";  /* attr() function allows us to pull in the value of an attribute on the element */
        float: left;
    }
        th,
        dt, td[data-name]::before {
            color: #3a3a3a;
            font-weight: normal;
            font-size: .875em;
        }
        tfoot tr {
            display: flex;
            justify-content: space-between;
            align-items: baseline;
        }
        tfoot th {
            padding: 5px;
        }

}
dl {
    display: grid;
    gap: .5rem;
    grid-template-columns: auto max-content; /* We use max-content for our second column because we don't want the numbers to wrap, which woud make them difficult to read */
    padding: 0 1rem;
}
dd {
    text-align: right;
}
.actions {
    padding: 1rem;
    text-align: center;
}
.actions a {
    margin: 0 .25rem .5rem;
}
 input[type="number"] {
    text-align: right;
}
@media (min-width: 550px) {
    th {
        text-align: left;
    }
    th:nth-of-type(n+3),
    td:nth-of-type(n+3) { /* applied to all td and th elements that are >= 3 position of table */
        text-align: right;
    }
    td, th {
        padding: 10px;
    }
}
@media (min-width: 995px) {
    .section-container {
        display: flex;
        gap: 20px;
        
    }
    section.my-cart {
        flex-grow: 1;
            /* If space is left over after flex has been applied to the content, this element should be made wider to use the extra space */
    }
    section.summary {
        flex-basis: 250px; /* Initial size of the section when the browser starts calculating how much room to assign each section */
    }
    main {
        max-width: 1280px;
        margin: 0 auto;
    }
}